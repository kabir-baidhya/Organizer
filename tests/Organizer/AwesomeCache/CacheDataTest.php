<?php

namespace Gckabir\Organizer\AwesomeCache;

use Gckabir\Organizer\TestCase;

class CacheDataTest extends TestCase
{

    public function __construct()
    {
        $config = [
            'directory'    => __DIR__.'/../../TestData/cache',
        ];
        CacheData::config($config);
    }

    public function testDirectoryPathAlwaysEndsWithATrailingSlash()
    {
        $directory = CacheData::config('directory');

        $lastCharacter = substr($directory, -1, 1);
        $this->assertEquals($lastCharacter, '/');
    }

    public function testDirectoryIsAutoGeneratedWhenInstantiated()
    {
        $myCache = new CacheData('testdata');

        $directory = CacheData::config('directory');

        $directoryExists = is_dir($directory);

        $this->assertTrue($directoryExists);
    }

    /**
     * @expectedException Gckabir\Organizer\AwesomeCache\CacheException
     */
    public function testExceptionWhenBlankKeyIsPassedInTheConstructor()
    {
        $myCache = new CacheData('  ');
    }

    public function testStoringDataInTheCache()
    {
        $key = 'testdata1';
        $myCache = new CacheData($key);

        if (file_exists($myCache->filePath())) {
            unlink($myCache->filePath());
        }

        $this->assertFileNotExists($myCache->filePath());

        $myCache->putInCache('this is just a test data');

        $this->assertFileExists($myCache->filePath());

        return $key;
    }

    /**
     * @depends testStoringDataInTheCache
     */
    public function testIsCachedFunctionIsWorking($existingDataKey)
    {
        $myCache = new CacheData($existingDataKey);
        $this->assertTrue($myCache->isCached());

        // for an un existing file
        $anotherData = new CacheData('some-unexisting-data');

        $this->assertFalse($anotherData->isCached());
    }

    public function testRetrievingDataFromCache()
    {
        $key = 'testdata2';

        //storing
        $myCache = new CacheData($key);

        $dataToBeCached = [
            'foo'    => 'Bar',
            'hello'    => 'World',
        ];

        $myCache->putInCache($dataToBeCached);

        // retrieving
        $myCacheRetrival = new CacheData($key);

        $retrievedData = $myCacheRetrival->cachedData();

        $this->assertNotEmpty($retrievedData);
        $this->assertEquals($dataToBeCached, $retrievedData);
    }

    public function testClearingSpecificCacheData()
    {
        $key = 'testdata3';

        $myCache = new CacheData($key);

        $myCache->putInCache('Foo Bar');

        $this->assertFileExists($myCache->filePath());

        $myCache->purge();

        $this->assertFileNotExists($myCache->filePath());
    }

    public function testClearingAllCachedData() {

        $foo1 = new CacheData('foo1');
        $foo1->putInCache('Foo BAr 1');

        $foo2 = new CacheData('foo2');
        $foo2->putInCache('Foo BAr 2');

        $foo3 = new CacheData('foo3');
        $foo3->putInCache('Foo BAr 3');

        CacheData::clearAll();

        $this->assertFileNotExists($foo1->filePath());
        $this->assertFileNotExists($foo1->filePath());
        $this->assertFileNotExists($foo1->filePath());

    }

    public function testCountAllIsWorking() {

        CacheData::clearAll();
        
        $this->assertEquals(0, CacheData::countAll());

        $foo1 = new CacheData('foo1');
        $foo1->putInCache('Foo BAr 1');

        $foo2 = new CacheData('foo2');
        $foo2->putInCache('Foo BAr 2');

        $this->assertEquals(2, CacheData::countAll());
    }

    public function testConfigurations() {

        $ourConfig  = [
            'cacheExpiry'   => 44556,
            'directory'     => 'foo-cache/'
        ];

        // Setting configurations
        CacheData::config($ourConfig);

        // retrieving all config
        $allConfigs = CacheData::config();
        $this->assertTrue(is_array($allConfigs));

        $this->assertEquals($ourConfig['cacheExpiry'], $allConfigs['cacheExpiry']);
        $this->assertEquals($ourConfig['directory'], $allConfigs['directory']);

        // retrieving individual config items
        $this->assertEquals($ourConfig['cacheExpiry'], CacheData::config('cacheExpiry'));
        $this->assertEquals($ourConfig['directory'], CacheData::config('directory'));
    }

    public function testConfigThrowsExceptionForInvalidInput() {

        $this->setExpectedException('Gckabir\Organizer\AwesomeCache\CacheException');
        CacheData::config(56.2);
    }
}
